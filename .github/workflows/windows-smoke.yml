name: Windows smoke tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  smoke-windows:
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Prepare outputs dir
        run: |
          if (!(Test-Path -Path outputs)) { New-Item -ItemType Directory -Path outputs | Out-Null }

      - name: Start static server in background
        # Replace this with the command that starts your actual viewer/server.
        # This example uses Python's simple HTTP server to serve the repository root.
        # If your app has a dedicated start command, use that instead.
        run: |
          Start-Process -NoNewWindow -FilePath "${{ runner.tool_cache }}/windows/python3.11.*/python.exe" -ArgumentList "-m", "http.server", "8000" 
        shell: powershell

      - name: Wait for server to bind
        run: |
          $max=30; $i=0
          while ($i -lt $max) {
            if (Test-NetConnection -ComputerName 127.0.0.1 -Port 8000 -WarningAction SilentlyContinue) { break }
            Start-Sleep -Seconds 1; $i++
          }
          if ($i -ge $max) { Write-Error "Server did not bind"; exit 1 }
        shell: powershell

      - name: Run trace_runner and capture run path
        run: |
          python src/trace_runner.py --out outputs --label "ci-test" > run_path.txt
          $run_path = Get-Content run_path.txt | Select-Object -Last 1
          echo "run_path=$run_path" >> $env:GITHUB_ENV
        shell: powershell

      - name: Resolve latest via Python resolver and smoke test timeline.json
        run: |
          python - <<'PY'
          import requests, time
          from src.output_resolver import resolve_latest_path
          base = "http://127.0.0.1:8000/outputs"
          latest = resolve_latest_path(base)
          timeline = f"{base}/{latest}/logs/timeline.json"
          for _ in range(10):
            try:
              r = requests.get(timeline, timeout=3)
              if r.ok:
                print("timeline found:", timeline)
                exit(0)
            except Exception:
              pass
            time.sleep(0.5)
          print("timeline not found:", timeline)
          exit(2)
          PY
        shell: bash

      - name: Upload outputs artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: outputs
