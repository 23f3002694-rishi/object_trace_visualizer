name: Windows smoke tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  smoke-windows:
    runs-on: windows-latest
    env:
      # Ensures Python output appears immediately in the logs
      PYTHONUNBUFFERED: '1'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --- Dependency Installation (Fixed for path reliability) ---
      
      - name: Install FFmpeg using Chocolatey and Refresh Environment
        shell: pwsh
        run: |
          Write-Host "Installing ffmpeg via choco..."
          # Install ffmpeg.
          choco install ffmpeg -y --no-progress
          
          # CRITICAL FIX: Chocolatey requires 'refreshenv' or a path update
          # to register new executables within the current shell session.
          Write-Host "Refreshing environment path..."
          refreshenv
          
      - name: Verify FFmpeg Installation
        # This step will now use a fresh path cache thanks to 'refreshenv'
        shell: pwsh
        run: |
          if (-not (Get-Command ffmpeg -ErrorAction SilentlyContinue)) { 
            Write-Error "ffmpeg not available on PATH, failing build."; exit 1 
          }
          Write-Host "FFmpeg successfully installed and available."
          ffmpeg -version # Should now execute successfully

      - name: Setup Python 3.11 and Cache Dependencies
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      # --- Python Setup and Dependencies ---

      - name: Install Python Dependencies
        shell: pwsh
        run: |
          if (Test-Path requirements.txt) {
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
          } else {
            Write-Host "No requirements.txt found; skipping pip install."
          }

      - name: Create Output Directory
        shell: pwsh
        run: New-Item -Path 'outputs' -ItemType Directory -Force

      # --- Execution Steps ---

      - name: Start static server in background
        # Save the process ID to a file for explicit cleanup later
        id: start_server
        shell: pwsh
        run: |
          $pidFile = "server_pid.txt"
          Write-Host "Starting http.server in background on port 8000"
          $process = Start-Process -NoNewWindow -PassThru -FilePath python -ArgumentList "-m","http.server","8000"
          $process.Id | Out-File -FilePath $pidFile -Encoding UTF8
          Start-Sleep -Seconds 2

      - name: Run smoke command
        shell: pwsh
        run: |
          python -c "print('smoke test placeholder running...')"

      - name: Optional ffmpeg task
        shell: pwsh
        run: |
          if (Get-Command ffmpeg -ErrorAction SilentlyContinue) {
            Write-Host "Running final FFmpeg version check..."
            ffmpeg -hide_banner -loglevel error -version
          } else {
            Write-Host "ffmpeg not found; skipping optional ffmpeg task"
          }

      # --- Cleanup and Artifact Upload ---
      
      - name: Stop Background Server (Crucial Cleanup)
        if: always()
        shell: pwsh
        run: |
          $pidFile = "server_pid.txt"
          if (Test-Path $pidFile) {
            $pid = Get-Content $pidFile -ErrorAction SilentlyContinue
            if ($pid -and $pid -as [int]) {
              Write-Host "Stopping server with PID: $pid"
              Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue
            }
          }
      
      - name: Upload outputs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: outputs
