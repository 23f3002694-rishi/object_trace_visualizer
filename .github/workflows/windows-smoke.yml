name: Windows smoke tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  smoke-windows:
    runs-on: windows-latest
    env:
      PYTHONUNBUFFERED: '1'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Chocolatey and ffmpeg (robust on Windows)
        shell: pwsh
        run: |
          $installer = "$env:TEMP\choco_install.ps1"
          Invoke-WebRequest -Uri 'https://community.chocolatey.org/install.ps1' -OutFile $installer -UseBasicParsing
          & 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe' -NoProfile -ExecutionPolicy Bypass -File $installer
          if (Test-Path "$env:ALLUSERSPROFILE\chocolatey\bin\choco.exe") {
            $env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine') + ';' + [System.Environment]::GetEnvironmentVariable('Path','User')
          } else {
            Write-Error "Chocolatey installation did not produce choco.exe on expected path"; exit 1
          }

      - name: Install ffmpeg with retries
        shell: pwsh
        run: |
          $maxRetries = 3
          for ($i = 1; $i -le $maxRetries; $i++) {
            try {
              & choco install ffmpeg -y --no-progress
              $chocoBin = "$env:ALLUSERSPROFILE\chocolatey\bin"
              if (-not ($env:Path -split ';' | Where-Object { $_ -eq $chocoBin })) {
                $env:Path = "$chocoBin;$env:Path"
              }
              if (Get-Command ffmpeg -ErrorAction SilentlyContinue) { Write-Host "ffmpeg installed"; break }
              throw "ffmpeg not found after install"
            } catch {
              Write-Host "ffmpeg install attempt $i failed: $($_.Exception.Message)"
              if ($i -eq $maxRetries) { throw }
              Start-Sleep -Seconds (5 * $i)
            }
          }

      - name: Verify ffmpeg
        shell: pwsh
        run: |
          if (-not (Get-Command ffmpeg -ErrorAction SilentlyContinue)) { Write-Error "ffmpeg not available on PATH"; exit 1 }
          ffmpeg -version

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check python and ffmpeg on runner
        shell: pwsh
        run: |
          Write-Host "=== python --version ==="
          python --version
          Write-Host "=== ffmpeg -version (if available) ==="
          if (Get-Command ffmpeg -ErrorAction SilentlyContinue) {
            ffmpeg -version
          } else {
            Write-Host "ffmpeg not available in PATH"
          }

      - name: Install Python deps if present
        shell: pwsh
        run: |
          if (Test-Path requirements.txt) {
            pip install -r requirements.txt
          } else {
            Write-Host "No requirements.txt"
          }

      - name: Start static server in background
        shell: pwsh
        run: |
          Write-Host "Starting http.server in background on port 8000"
          Start-Process -NoNewWindow -FilePath python -ArgumentList "-m","http.server","8000"
          Start-Sleep -Seconds 2

      - name: Run smoke command
        shell: pwsh
        run: |
          python -c "print('smoke test placeholder')"

      - name: Optional ffmpeg task (safe guarded)
        shell: pwsh
        run: |
          if (Get-Command ffmpeg -ErrorAction SilentlyContinue) {
            ffmpeg -hide_banner -loglevel error -version
          } else {
            Write-Host "ffmpeg not found; skipping ffmpeg task"
          }

      - name: Upload outputs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: outputs
