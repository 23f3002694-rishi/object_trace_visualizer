name: Windows smoke tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  smoke-windows:
    runs-on: windows-latest
    env:
      PYTHONUNBUFFERED: '1'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PowerShell execution policy
        shell: pwsh
        run: Set-ExecutionPolicy Bypass -Scope Process -Force

      - name: Install Chocolatey (robust method)
        shell: pwsh
        run: |
          try {
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              Write-Host "Chocolatey already installed"
              exit 0
            }
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            $chocoBin = "$env:ALLUSERSPROFILE\chocolatey\bin"
            Add-Content $env:GITHUB_PATH $chocoBin
            $env:Path = "$chocoBin;$env:Path"
            if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              throw "Chocolatey installation failed"
            }
            Write-Host "Chocolatey installed successfully"
          }
          catch {
            Write-Error "Chocolatey installation failed: $($_.Exception.Message)"
            exit 1
          }

      - name: Install FFmpeg via Chocolatey
        shell: pwsh
        run: |
          $maxRetries = 3
          for ($i = 1; $i -le $maxRetries; $i++) {
            try {
              choco install ffmpeg -y --no-progress
              if (Get-Command ffmpeg -ErrorAction SilentlyContinue) {
                Write-Host "FFmpeg installed successfully"
                break
              }
              throw "ffmpeg not found after install"
            }
            catch {
              Write-Host "Attempt $i failed: $($_.Exception.Message)"
              if ($i -eq $maxRetries) { exit 1 }
              Start-Sleep -Seconds (5 * $i)
            }
          }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Verify core dependencies
        shell: pwsh
        run: |
          if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
            Write-Error "Python not found"
            exit 1
          }
          python --version
          if (-not (Get-Command ffmpeg -ErrorAction SilentlyContinue)) {
            Write-Error "FFmpeg not found"
            exit 1
          }
          ffmpeg -version

      - name: Install Python dependencies
        shell: pwsh
        run: |
          if (Test-Path requirements.txt) {
            $tempReq = "$env:TEMP\requirements.cleaned.txt"
            Get-Content requirements.txt |
              Where-Object { $_ -and $_ -notmatch '^\s*(ECHO is off\.|@?ECHO\s+OFF\b|rem\b|\#)' } |
              ForEach-Object { $_.Trim() } |
              Set-Content $tempReq
            if ((Get-Content $tempReq).Length -gt 0) {
              python -m pip install --upgrade pip
              python -m pip install -r $tempReq
            }
          }

      - name: Start background HTTP server
        shell: pwsh
        run: |
          $proc = Start-Process -NoNewWindow -FilePath python -ArgumentList "-m","http.server","8000" -PassThru
          $proc.Id | Out-File "$env:TEMP\server_pid.txt"
          Start-Sleep -Seconds 3

      - name: Run smoke tests
        shell: pwsh
        run: |
          python -c "print('✓ Python OK')"
          try {
            Invoke-WebRequest http://localhost:8000 -UseBasicParsing -TimeoutSec 5
            Write-Host "✓ HTTP OK"
          } catch {
            Write-Warning "HTTP test failed"
          }
          try {
            ffmpeg -hide_banner -loglevel error -f lavfi -i testsrc2=duration=1:size=320x240:rate=1 -f null -
            Write-Host "✓ FFmpeg OK"
          } catch {
            Write-Warning "FFmpeg test failed"
          }

      - name: Cleanup background processes
        if: always()
        shell: pwsh
        run: |
          if (Test-Path "$env:TEMP\server_pid.txt") {
            Stop-Process -Id (Get-Content "$env:TEMP\server_pid.txt") -ErrorAction SilentlyContinue
          }
          Get-Process python -ErrorAction SilentlyContinue |
            Where-Object { $_.CommandLine -match "http.server" } |
            Stop-Process -Force

      - name: Upload test outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-outputs
          path: |
            outputs/
            *.log
            ${{ env.TEMP }}/requirements.cleaned.txt
          retention-days: 7
